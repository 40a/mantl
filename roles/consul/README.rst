.. versionadded:: 0.1

.. todo:: make a reference to registrator in the paragraph below.

`Consul <https://www.consul.io/>`_ is used in the project to
coordinate service discovery, specifically using the inbuilt DNS
server.

Variables
---------

You can use these variables to customize your Consul installation (see
the :ref:`Consul Example Playbook <consul-example-playbook>` for how
to do so.) You'll typically want to set at least :data:`dc`,
:data:`server_group`, and :data:`gossip_key`. These variables are
roughly sorted from most commonly used to least.

.. py:data:: dc

   If set, consul will advertise this datacenter (default ``dc1``)

.. py:data:: server_group

   Group to configure join IPs from. For example, if your
   ``server_group`` is ``consul_server`` (the default), IPs will be
   calculated from the hosts in that group and added to the list of
   servers to join.

.. py:data:: gossip_key

   If set, this is used to encrypt communication between nodes. This
   is unset by default, but you *really should* set one up. You can
   get a suitable key by running ``openssl rand 16 | base64``.

.. py:data::  interface

   Interface on each host from which the IPV4 will be taken when doing
   calculation described in ``server_group``. (default
   ``ansible_default_ipv4``)

.. py:data:: is_server

   Whether this node should be a server (``true``) or an agent
   (``false``). (default ``true``)

.. py:data:: bootstrap_expect

   The number of servers to expect to join the cluster before
   bootstrapping. This is used in place of a two-phase bootstrap
   (where one node bootstraps and then restarts as a regular server.)
   This is set by default to be the number of servers in
   ``server_group``, but can be changed where the situation warrants
   (for example if you have *many* servers, you may want to set this
   to be a low number like 3.)

.. py:data:: image

   Docker image to pull and run (default ``progrium/consul:latest``)

.. py:data:: retry_join

   Automatically generated by the calculation described in
   ``server_group``, but you can override it for custom behavior.

.. _consul-example-playbook:

Example Playbook
----------------

.. code-block:: yaml

    ---
    - hosts: all
      roles:
        - common
        - docker

    - hosts: dc1
      roles:
        - role: consul
          # NOTE: this gossip key and the one for DC2 have to be the same!
          gossip_key: "ggVIrhEzqe7W/65YZ9fYFA=="
          server_group: dc1
          dc: dc1

    - hosts: dc2
      roles:
        - role: consul
          gossip_key: "ggVIrhEzqe7W/65YZ9fYFA=="
          server_group: dc2
          dc: dc2
