[Unit]
Description=Consul
After=docker.service
BindsTo=docker.service

[Service]
Restart=on-failure
RestartSec=20
TimeoutStartSec=0

ExecStartPre=-/usr/bin/docker pull {{ image }}
# start the data volume iff it doesn't exist. When `docker inspect` runs, it
# will exit 0 on success and 1 on failure. Since we depend on Docker we can
# probably assume it's up, so getting a 1 means we need to create the
# container.
ExecStartPre=/usr/bin/bash -c 'docker inspect -f "\{\{.Created\}\}" consul-data-volume || /usr/bin/docker run -v /data --name=consul-data-volume tianon/true'
ExecStart=/usr/bin/docker run --rm \
                              --name=consul \
                              --privileged \
                              --hostname=%H \
                              --volumes-from=consul-data-volume \
                              --volume=/var/run/docker.sock:/tmp/docker.sock \
                              --env=GOMAXPROCS={{ ansible_processor_cores }} \
                              -p 8300:8300 \
                              -p 8301:8301 \
                              -p 8301:8301/udp \
                              -p 8302:8302 \
                              -p 8302:8302/udp \
                              -p 8400:8400 \
                              -p 8500:8500 \
                              -p 8600:53 \
                              -p 8600:53/udp \
                              {{ image }} -dc "{{ dc }}" \
                                          -advertise "{{ advertise }}" \
                                          -rejoin \
                                          -data-dir /data
                                          {%- if retry_join is defined %} {{ retry_join }}{% endif %}
                                          {%- if is_server is defined %} -server -bootstrap-expect "{{ bootstrap_expect }}"{% endif %}
                                          {%- if gossip_key is defined %} -encrypt "{{ gossip_key }}"{% endif %}

ExecStop=/usr/bin/docker exec consul consul leave

[Install]
WantedBy=multi-user.target
