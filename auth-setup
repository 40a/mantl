#!/usr/bin/env python
"""set up authentication and security for various components"""
from __future__ import print_function
from argparse import ArgumentParser
import getpass
import os
import yaml

parser = ArgumentParser(__name__, __doc__)


class Component(object):
    def check(self, subset):
        """return tasks which need to be run"""
        pass

    def ask_bool(self, question, default=True):
        """ask a question of the user"""
        if default is True:
            yn = 'Y/n'
        elif default is False:
            yn = 'y/N'
        else:
            raise ValueError('cannot convert %s to bool', default)

        answer = raw_input('{} [{}]: '.format(question, yn))
        if answer.lower() == 'y':
            return True
        elif answer.lower() == 'n':
            return False
        elif answer == '':
            return default

    def ask_value(self, prompt, default=None, password=False):
        if password:
            out = getpass.getpass('{} [{}]: '.format(
                prompt,
                'default password set' if default is not None else 'no default password set'
            ))
        else:
            out = getpass.getpass('{}{}: '.format(
                prompt,
                ' [{}]'.format(default) if default is not None else ''
            ))

        if out is '':
            out = default

        return out

    def read_yaml(self, filename):
        try:
            with open(filename, 'r') as handle:
                return yaml.safe_load(handle)
        except IOError as err:
            if err.errno == 2:
                return {}
            else:
                raise err

    def write_yaml(self, filename, content):
        with open(filename, 'w') as handle:
            yaml.dump(content, handle, indent=2)

    def read_group(self, group):
        return self.read_yaml(os.path.join('inventory', 'group_vars', group))

    def write_group(self, group, content):
        return self.write_yaml(
            os.path.join('inventory', 'group_vars', group),
            content
        )

    def read_host(self, host):
        return self.read_yaml(os.path.join('inventory', 'host_vars', host))

    def write_host(self, host, content):
        return self.write_yaml(
            os.path.join('inventory', 'host_vars', host),
            content
        )


class Marathon(Component):
    def check(self):
        return [self.basic_auth, self.mesos_auth]

    def basic_auth(self):
        "basic auth"
        if not self.ask_bool('Set up/update basic auth for Marathon?', default=True):
            return

        config = self.read_group('marathon_servers')

        config['marathon_http_credentials'] = '{}:{}'.format(
            self.ask_value('Username'),
            self.ask_value('Password', password=True),
        )
        self.write_group('marathon_servers', config)

    def mesos_auth(self):
        "marathon framework authentication"
        if not self.ask_bool('Set up/update Marathon framework authentication?', default=True):
            return False

        config = self.read_group('marathon_servers')
        config['marathon_principal'] = self.ask_value(
            'Principal',
            default=config.get('marathon_principal', 'marathon')
        )
        config['marathon_secret'] = self.ask_value(
            'Secret',
            default=config.get('marathon_secret', None),
            password=True,
        )
        self.write_group('marathon_servers', config)


class Mesos(Component):
    def check(self):
        return [self.framework_auth]

    def framework_auth(self):
        "framework auth"
        mesos_leaders = self.read_group('mesos_leaders')

        marathon = self.read_group('marathon_servers')
        if 'marathon_principal' in marathon and 'marathon_secret' in marathon:
            mesos_leaders.setdefault('mesos_credentials', [])
            mesos_leaders['mesos_credentials'].append({
                'principal': marathon['marathon_principal'],
                'secret': marathon['marathon_secret'],
            })
            self.write_group('mesos_leaders', mesos_leaders)
            print('set/updated auth for Marathon')


def main(args):
    for cls in Component.__subclasses__():
        component = cls()

        print(' {} '.format(cls.__name__).center(40, '='))
        for item in component.check():
            print('----> {}'.format(item.__doc__))
            item()

if __name__ == '__main__':
    main(parser.parse_args())
