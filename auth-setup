#!/usr/bin/env python
"""set up authentication and security for various components"""
from __future__ import print_function
from argparse import ArgumentParser
import getpass
import os
import yaml
import random
import base64
from contextlib import contextmanager

parser = ArgumentParser(__name__, __doc__)


class Component(object):
    def check(self, subset):
        """return tasks which need to be run"""
        pass

    def read_yaml(self, filename):
        try:
            with open(filename, 'r') as handle:
                return yaml.safe_load(handle)
        except IOError as err:
            if err.errno == 2:
                return {}
            else:
                raise err

    def write_yaml(self, filename, content):
        with open(filename, 'w') as handle:
            yaml.dump(
                content,
                handle,
                default_style='"',
                indent=2,
                explicit_start=True,
            )

    def read_group(self, group):
        return self.read_yaml(os.path.join('inventory', 'group_vars', group))

    def write_group(self, group, content):
        return self.write_yaml(
            os.path.join('inventory', 'group_vars', group),
            content
        )

    def read_host(self, host):
        return self.read_yaml(os.path.join('inventory', 'host_vars', host))

    def write_host(self, host, content):
        return self.write_yaml(
            os.path.join('inventory', 'host_vars', host),
            content
        )

    @contextmanager
    def modify_group(self, group):
        content = self.read_group(group)
        yield content
        self.write_group(group, content)

    @contextmanager
    def modify_host(self, host):
        content = self.read_host(host)
        yield content
        self.write_host(host, content)

    def random(self, size=2**5):
        """get `size` bytes of random data, base64 encoded

        tries to get random data from /dev/random, but if that fails
        it will use the Python PRNG."""
        try:
            with open('/dev/random') as ran:
                bytes = ran.read(size)
        except IOError:  # /dev/random is unavailable! PRNG time!
            bytes = ''.join(
                chr(random.randint(0, 256))
                for _ in range(size)
            )

        return base64.b64encode(bytes)


class Consul(Component):
    def check(self):
        return [self.gossip_key]

    def gossip_key(self):
        "gossip key"
        with self.modify_group('consul_servers') as config:
            if 'consul_gossip_key' not in config:
                config['consul_gossip_key'] = self.random(16)
                print('set gossip key')
            else:
                print('gossip key already set')


class Marathon(Component):
    def check(self):
        return [self.mesos_auth]

    def mesos_auth(self):
        "marathon framework authentication"
        with self.modify_group('marathon_servers') as config:
            config.setdefault('marathon_principal', 'marathon')
            if 'marathon_secret' not in config:
                config['marathon_secret'] = self.random()
                print('set marathon framework secret')
            else:
                print('marathon secret already set')


class Mesos(Component):  # Mesos should always come after any frameworks
    def check(self):
        return [self.framework_auth]

    def framework_auth(self):
        "framework auth"
        with self.modify_group('mesos_leaders') as config:
            frameworks = set(['marathon'])

            marathon = self.read_group('marathon_servers')
            if 'marathon_principal' in marathon and 'marathon_secret' in marathon:
                config.setdefault('mesos_credentials', [])
                config['mesos_credentials'].append({
                    'principal': marathon['marathon_principal'],
                    'secret': marathon['marathon_secret'],
                })
                print('set/updated auth for Marathon')
            else:
                frameworks.remove('marathon')

            authenticate = len(frameworks) > 0
            config['mesos_authenticate_frameworks'] = authenticate
            print('{} framework auth'.format('enabled' if authenticate else 'disabled'))


def main(args):
    for cls in Component.__subclasses__():
        component = cls()

        print(' {} '.format(cls.__name__).center(40, '='))
        for item in component.check():
            print('----> {}'.format(item.__doc__))
            item()

if __name__ == '__main__':
    main(parser.parse_args())
